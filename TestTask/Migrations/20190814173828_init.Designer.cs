// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestTask;

namespace TestTask.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20190814173828_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TestTask.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new { Id = 1, Name = "Category 1" },
                        new { Id = 2, Name = "Category 2" },
                        new { Id = 3, Name = "Category 3" }
                    );
                });

            modelBuilder.Entity("TestTask.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new { Id = 1, CategoryId = 2, Name = "Product 1" },
                        new { Id = 2, CategoryId = 3, Name = "Product 2" },
                        new { Id = 3, CategoryId = 1, Name = "Product 3" },
                        new { Id = 4, CategoryId = 2, Name = "Product 4" },
                        new { Id = 5, CategoryId = 3, Name = "Product 5" },
                        new { Id = 6, CategoryId = 1, Name = "Product 6" },
                        new { Id = 7, CategoryId = 2, Name = "Product 7" },
                        new { Id = 8, CategoryId = 3, Name = "Product 8" },
                        new { Id = 9, CategoryId = 1, Name = "Product 9" },
                        new { Id = 10, CategoryId = 2, Name = "Product 10" },
                        new { Id = 11, CategoryId = 3, Name = "Product 11" },
                        new { Id = 12, CategoryId = 1, Name = "Product 12" },
                        new { Id = 13, CategoryId = 2, Name = "Product 13" },
                        new { Id = 14, CategoryId = 3, Name = "Product 14" },
                        new { Id = 15, CategoryId = 1, Name = "Product 15" }
                    );
                });

            modelBuilder.Entity("TestTask.Models.Product", b =>
                {
                    b.HasOne("TestTask.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
